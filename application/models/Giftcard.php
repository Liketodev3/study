<?php
class Giftcard extends MyAppModel
{
    const DB_TBL = 'tbl_gift_cards';
    const DB_TBL_PREFIX = 'giftcard_';
    const DB_TBL_GIFTCARD_RECIPIENT = 'tbl_giftcard_recipients';
    const DB_TBL_GIFTCARD_BUYER = 'tbl_giftcard_buyers';
    const DB_TBL_USER_GIFTCARD_CART = 'tbl_user_giftcard_cart';
    const GIFTCARD_USED_STATUS = 1;
    const GIFTCARD_UNUSED_STATUS = 0;

    public function __construct($id = 0)
    {
        parent::__construct(static ::DB_TBL, static ::DB_TBL_PREFIX . 'id', $id);
        $this->cart_lang_id = CommonHelper::getLangId();
        $this->cart_user_id = session_id();
        if (UserAuthentication::isUserLogged()) {
            $this->cart_user_id = UserAuthentication::getLoggedUserId();
        }
    }

    public static function getStatusArr($langId = 0)
    {
        $langId = FatUtility::int($langId);
        if ($langId < 1) {
            $langId = CommonHelper::getLangId();
        }
        return array(
            static::GIFTCARD_UNUSED_STATUS => Label::getLabel('LBL_Unused', $langId),
            static::GIFTCARD_USED_STATUS => Label::getLabel('LBL_Used', $langId)
        );
    }

    public function saveOrder()
    {
        $db = FatApp::getDb();
        $orderData = array();
        $userId = $this->cart_user_id;
        $langId = CommonHelper::getLangId();
        $languageRow = Language::getAttributesById($langId);
        $currencyRow = Currency::getAttributesById(CommonHelper::getCurrencyId());
        $orderData['order_id'] = $this->generateOrderId();
        $orderData['order_type'] = Order::TYPE_GIFTCARD;
        $orderData['order_user_id'] = $userId;
        $orderData['order_is_paid'] = Order::ORDER_IS_PENDING;
        $orderData['order_language_id'] = $langId;
        $orderData['order_language_id'] = $languageRow['language_id'];
        $orderData['order_language_code'] = $languageRow['language_code'];
        $orderData['order_currency_id'] = $currencyRow['currency_id'];
        $orderData['order_currency_code'] = $currencyRow['currency_code'];
        $orderData['order_currency_value'] = $currencyRow['currency_value'];
        $orderData['order_date_added'] = date('Y-m-d H:i:s');
        $cartPriceData = $this->getGiftCardCartPriceSum();
        $orderData['order_net_amount'] = $cartPriceData;
        //$orderData['order_pmethod_id']  = $pMethodId;
        $db->startTransaction();
        $resultOrder = $db->insertFromArray(Order::DB_TBL, $orderData);
        if (true === $resultOrder) {
            $orderId = $orderData['order_id'];

            $childResult = $this->saveChildOrder($orderId);
            if (true ===  $childResult && $db->commitTransaction()) {
                $this->emptyGiftCardCart();
                return $orderId;
            }
        }

        $db->rollbackTransaction();
        return false;
    }

    public function addGiftcardDetails($orderId)
    {
        if (empty($orderId)) {
            die();
        }
        $db = FatApp::getDb();
        $srch = new  OrderSearch();
        $srch->addCondition('order_id', '=', $orderId);
        $srch->addCondition('order_is_paid', '=', Order::ORDER_IS_PAID);

        $rs = $srch->getResultSet();
        $paidOrderRow = $db->fetch($rs);

        $srch = new SearchBase(Giftcard::DB_TBL, 'giftcards');
        $srch->joinTable(OrderProduct::DB_TBL, 'INNER JOIN', 'op.op_id = giftcards.giftcard_op_id', 'op');
        $srch->joinTable(OrderProduct::DB_TBL, 'INNER JOIN', 'op.op_id = giftcards.giftcard_op_id', 'op');
        $srch->addCondition('op.op_order_id', '=', $orderId);
        $rs = $srch->getResultSet();
        $orderGiftCards = $db->fetch($rs);

        // Order is already paid and giftcard generated by admin
        if (!empty($paidOrderRow) && empty($orderGiftCards)) {
            $opSrch = new OrderProductSearch();
            $opSrch->doNotLimitRecords();
            $opSrch->addCondition('op.op_order_id', '=', $orderId);
            $opSrch->addMultipleFields(array(
                'op_id',
                'op_unit_price'
            ));
            $opRs = $opSrch->getResultSet();
            $orderProducts = FatApp::getDb()->fetchAll($opRs);
            foreach ($orderProducts as $giftcard) {
                /*OrderProduct::updateProductStatus(
                    array('op_status_id' => 2),
                    array(
                        'smt'=>'op_id = ?',
                        'vals'=>array($giftcard['op_id'])
                    )
                );*/
                $insertData['giftcard_code'] = $this->generateGiftcardCode();
                $insertData['giftcard_op_id'] = $giftcard['op_id'];
                $insertData['giftcard_amount'] = $giftcard['op_unit_price'];
                $insertData['giftcard_expiry_date'] = date('Y-m-d', strtotime(GIFTCARD_EXPIRATION_DAYS));
                $insertData['giftcard_status'] = static ::GIFTCARD_UNUSED_STATUS;
                if (!$db->insertFromArray(static ::DB_TBL, $insertData)) {
                    Message::addErrorMessage($db->getError());
                    FatUtility::dieJsonError(Message::getHtml());
                }
            }
            $buyerData = $this->getBuyerData($orderId);
            $giftcardlist = $this->getGiftcardLists($orderId);
            $email = new EmailHandler();
            $email->sendGiftCardNotification($giftcardlist);
        }

        return true;
    }

    public function checkGiftCardAvailablity($code, $userId)
    {
        $srch = new SearchBase(static::DB_TBL, 'giftcard');
        $srch->addCondition('giftcard_code', '=', $code);
        $srch->joinTable(OrderProduct::DB_TBL, 'INNER JOIN', 'op.op_id = giftcard.giftcard_op_id', 'op');
        $srch->joinTable(Order::DB_TBL, 'INNER JOIN', 'op.op_order_id = o.order_id', 'o');
        $srch->addCondition('giftcard_expiry_date', '>', date("Y-m-d"));
        $srch->addCondition('giftcard_status', '=', static::GIFTCARD_UNUSED_STATUS);
        $srch->addMultipleFields(array('o.order_currency_id','giftcard_amount as utxn_credit','giftcard.giftcard_op_id as utxn_op_id','op.op_order_id as utxn_order_id'));
        $sr = $srch->getResultSet();
        $row = FatApp::getDb()->fetch($sr);
        if (empty($row)) {
            return false;
        }
        return $row;
    }

    public function giftCartCartDetails()
    {
        $db = FatApp::getDb();
        $srch = new SearchBase('tbl_user_cart');
        $srch->addCondition('usercart_user_id', '=', $this->cart_user_id);
        $srch->addCondition('usercart_type', '=', Cart::TYPE_GIFTCARD);
        $srch->addMultipleFields(array('usercart_details'));
        $rs = $srch->getResultSet();

        $row = $db->fetch($rs);
        return json_decode($row['usercart_details']);
    }

    public function updateGiftcardStatus($code, $userId, $txnId)
    {
        if ($userId>0) {
            $record   = new TableRecord(static::DB_TBL);
            $record->assignValues(
                array(
                    "giftcard_code" 	=> $code,
                    "giftcard_status" 	=> static::GIFTCARD_USED_STATUS,
                    "giftcard_used_date" => date("Y-m-d")
                )
            );

            $cardArray = array(
                'giftcard_status' => static::GIFTCARD_USED_STATUS,
                'giftcard_used_date' => date("Y-m-d"),
                'giftcard_recipient_user_id' => $userId,
                'giftcard_utxn_id' => $txnId
            );

            if (!$record->addNew(array(), $cardArray)) {
                Message::addErrorMessage($record->getError());
            }
            return true;
        }
    }

    private function getGiftCardCartPriceSum()
    {
        $srch = new SearchBase(Cart ::DB_TBL);
        $srch->addCondition('usercart_user_id', '=', $this->cart_user_id);
        $srch->addCondition('usercart_type', '=', Cart::TYPE_GIFTCARD);
        $srch->addMultipleFields(array('usercart_details'));
        $rs = $srch->getResultSet();
        $row = FatApp::getDb()->fetch($rs);
        $cartRecord = json_decode($row['usercart_details']);
        return $cartRecord->giftcard_price;
    }

    private function emptyGiftCardCart()
    {
        $db = FatApp::getDb();
        $db->deleteRecords(Cart ::DB_TBL, array(
            'smt' => '`usercart_user_id`=?',
            'vals' => array(
                $this->cart_user_id
            )
        ));
    }


    private function generateOrderId()
    {
        $orderId = 'O';
        $orderId.= time();
        if ($this->checkUniqueOrderId($orderId)) {
            return $orderId;
        } else {
            $this->generateOrderId();
        }
    }

    private function checkUniqueOrderId($orderId)
    {
        $srch = new SearchBase(Order::DB_TBL);
        $srch->addCondition('order_id', '=', $orderId);
        $srch->addMultipleFields(array(
            'order_id'
        ));
        $rs = $srch->getResultSet();
        $row = FatApp::getDb()->fetchAll($rs);
        if (empty($row)) {
            return true;
        }

        return false;
    }

    private function generateGiftcardCode()
    {
        $giftcardCode = strtoupper(FatUtility::getRandomString(6));
        if ($this->checkUniqueGiftcardCode($giftcardCode)) {
            return $giftcardCode;
        } else {
            $this->generateGiftcardCode();
        }
    }

    private function checkUniqueGiftcardCode($giftcardCode)
    {
        $srch = new SearchBase(Giftcard::DB_TBL);
        $srch->addCondition('giftcard_code', '=', $giftcardCode);
        $srch->addMultipleFields(array(
            'giftcard_code'
        ));
        $rs = $srch->getResultSet();
        $row = FatApp::getDb()->fetch($rs);
        if (empty($row)) {
            return true;
        }

        return false;
    }

    private function saveChildOrder($orderId)
    {
        $db = FatApp::getDb();
        $counter = 1;
        $cartRecord = $this->giftCartCartDetails();

        $opInvoiceNumber = $orderId . '-S' . str_pad($counter, 4, '0', STR_PAD_LEFT);
        $orderProductData['op_order_id'] = $orderId;
        $orderProductData['op_invoice_number'] = $opInvoiceNumber;
        $orderProductData['op_qty'] = 1;
        $orderProductData['op_orderstatus_id'] = 1;
        $orderProductData['op_unit_price'] = $cartRecord->giftcard_price;
        //$orderProductData['op_type'] = OrderProduct::ORDER_PRODUCT_TYPE_GIFTCARD;
        $resultOp = $db->insertFromArray(OrderProduct::DB_TBL, $orderProductData);
        if (false === $resultOp) {
            return false;
        }
        $opId = $db->getInsertId();
        $reciepientDataValtable['gcrecipient_op_id'] = $opId;
        $reciepientDataValtable['gcrecipient_name'] = $cartRecord->gcrecipient_name;
        $reciepientDataValtable['gcrecipient_email'] = $cartRecord->gcrecipient_email;
        $resultGr = $db->insertFromArray(static ::DB_TBL_GIFTCARD_RECIPIENT, $reciepientDataValtable);
        if (false === $resultGr) {
            return false;
        }

        $buyerdata = array(
            'gcbuyer_op_id' => $opId,
            'gcbuyer_order_id' => $orderId,
            'gcbuyer_name' => $cartRecord->gcbuyer_name,
            'gcbuyer_email' => $cartRecord->gcbuyer_email,
            'gcbuyer_phone' => $cartRecord->gcbuyer_phone
        );

        $buyerResult = FatApp::getDb()->insertFromArray(static::DB_TBL_GIFTCARD_BUYER, $buyerdata);
        if (false === $buyerResult) {
            return false;
        }

        return true;
    }

    private function getBuyerData($orderId)
    {
        $srch = new SearchBase(static::DB_TBL_GIFTCARD_BUYER, 'gb');
        $srch->joinTable(Order::DB_TBL, 'INNER JOIN', 'gb.gcbuyer_order_id = o.order_id', 'o');
        $srch->addCondition('o.order_id', '=', $orderId);
        $srch->addMultipleFields(array('gcbuyer_name','gcbuyer_email'));
        $rs = $srch->getResultSet();
        return FatApp::getDb()->fetch($rs);
    }

    private function getGiftcardLists($orderId)
    {
        $srch = new SearchBase(Giftcard::DB_TBL, 'gc');
        $srch->joinTable(OrderProduct::DB_TBL, 'INNER JOIN', 'op.op_id = gc.giftcard_op_id', 'op');
        $srch->joinTable(Order::DB_TBL, 'INNER JOIN', 'op.op_order_id = o.order_id', 'o');
        $srch->joinTable(Giftcard::DB_TBL_GIFTCARD_RECIPIENT, 'INNER JOIN', 'op.op_id = gr.gcrecipient_op_id', 'gr');
        $srch->joinTable(Giftcard::DB_TBL_GIFTCARD_BUYER, 'INNER JOIN', 'op.op_id = gb.gcbuyer_op_id', 'gb');
        $srch->addCondition('o.order_id', '=', $orderId);
        $srch->addMultipleFields(array('gr.gcrecipient_email','gb.gcbuyer_op_id','gr.gcrecipient_name','gb.gcbuyer_name','gb.gcbuyer_email','o.order_currency_id','gc.giftcard_code','gc.giftcard_amount','gc.giftcard_expiry_date'));
        $rs = $srch->getResultSet();
        return FatApp::getDb()->fetchAll($rs);
    }
}
